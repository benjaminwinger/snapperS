#!/usr/bin/python
"""This program is a set of supplemental commands to be used with snapper"""


from argparse import RawTextHelpFormatter  # used so we can use \n in argparse descriptions
import argparse  # used for argument parsing

from subprocess import CalledProcessError  # used to catch exceptions
from subprocess import check_output as run  # used to run command to interface with btrfs
import os  # used to check for root and listdir

from tabulate import tabulate  # used for snapperS list


def mountSnapshotRW(path, enableWrite):  # set the snapshot at path to rw or ro
    """Remount a snapshot as ro or rw"""
    with open(os.devnull, 'w') as devnull:  # used so we don't have to write stderr to output
        run("btrfs property set -ts " + path + " ro " + str(not enableWrite).lower(),
            shell=True,
            stderr=devnull)


def delete(args):  # delete functionality
    """Delete a file or folder from a range of snapshots"""
    if args['range'] is not None:  # if they specified a range argument
        startPoint = int(args['range'].split('..')[0])  # first number
        endPoint = int(args['range'].split('..')[1])  # second number

    if '/' not in args['filename']:  # if the user tried to specify a relative path, warn them
        print "Specify the absolute path of the file starting with a /"
        exit(2)

    for snapshot in os.listdir(args['directory']):
        if args['range'] is not None:
            # only limit the start/end points if they user specified them
            if not startPoint <= int(snapshot) <= endPoint:
                continue
        try:
            mountSnapshotRW(args['directory'] + snapshot + "/snapshot/", True)
            # path to the actual snapshot is /.snapshots/[num]/snapshot/
        except CalledProcessError as e:
            if '50' in str(e):
                # when btrfs exits with an exit code of 50, there is no valid subvolume
                if args['verbose']:
                    print "No subvolume found in " + args['directory'] + snapshot + ". Skipping. "
                continue
            print e
            # if it isn't an exit code of 50, then there is some other
            # unrecoverable error, so we exit
            exit(3)
        try:
            with open(os.devnull, 'w') as devnull:
                # used so we don't have to write stderr to output
                if args['recursive']:
                    command = "rm -r "
                else:
                    command = "rm "
                out = run(command + args['directory'] + snapshot + "/snapshot" + args['filename'],
                          shell=True,
                          stderr=devnull)
                if args['verbose']:
                    print out
            if args['verbose']:
                print "Deleted from " + args['directory'] + snapshot
        except CalledProcessError as e:
            if "1" in str(e):  # an exit code 1 means the file doesn't exist
                if args['verbose']:
                    print ("Failed to delete the file in " + args['directory'] +
                           snapshot + "/snapshot/. Check that it exists and" +
                           " is not a directory. Skipping. ")
            else:
                print e  # otherwise there is an unrecoverable error
                exit(4)
        mountSnapshotRW(args['directory'] + snapshot + "/snapshot/", False)
        # set it back to ro once we are done
    try:
        mountSnapshotRW("/", True)
    except CalledProcessError as e:
        print "Error! Failed to remount / as rw. This will require maual intervention to fix. "
        exit(5)


def cat(args):  # cat functionality
    """print the contents of a specified file in a specified snapshot"""
    print run("cat " + args['directory'] + args['snapshot'] + "/snapshot" + args['filename'],
              shell=True)


def backup(args):
    """backup the specified snapshot to a specified file"""
    try:
        with open(os.devnull, 'w') as devnull:
            out = run(("btrfs send -v " + args['directory'] + args['snapshot'] +
                       "/snapshot/ > " + args['backup']),
                      stderr=devnull,
                      shell=True)
            if args['verbose']:
                print out
        print "Sucessfully backed up the file. "
    except CalledProcessError as e:
        print e
        print "Error! Failed to backup. Try again."


def restore(args):
    """restore the specified file to the specified mount point"""
    try:
        with open(os.devnull, 'w') as devnull:
            out = run("cat " + args['restoreLocation'] + " | btrfs receive -v " + args['backup'],
                      stderr=devnull,
                      shell=True)
            if args['verbose']:
                print out
        print "Sucessfully restored the file. "
    except CalledProcessError as e:
        print e
        print "Error! Failed to restore. Try again."


def listSubvolumes():
    subvols = run("btrfs subvolume list /", shell=True).splitlines()[1:]
    btrfsIDToSnapperID = {}
    for line in subvols:
        btrfsID = int(line.split(' ')[1])
        snapperID = int(line.split(' ')[-1].split('/')[1])
        btrfsIDToSnapperID[btrfsID] = snapperID
    storageInfo = run("btrfs qgroup show /", shell=True).splitlines()[2:]
    snapperIDToSpaceTuple = {}
    btrfsIDToSpaceTuple = {}
    for line in storageInfo:
        data = [datum for datum in line.split(' ') if datum != '']
        tuple = (data[1], data[2])
        btrfsID = int(data[0].split('/')[1])
        try:
            snapperID = btrfsIDToSnapperID[btrfsID]
        except KeyError as e:
            pass
        snapperIDToSpaceTuple[snapperID] = tuple
        btrfsIDToSpaceTuple[btrfsID] = tuple
    snapperList = run("snapper list", shell=True).splitlines()
    table = []
    headers = [section for section in snapperList[0].replace('|', '').split(' ') if section != '']
    headers.extend(["Size", "Unique Size"])
    for line in snapperList[2:]:
        lineArr = line.split(' | ')
        snapperID = int(lineArr[1])
        try:
            spaceTuple = snapperIDToSpaceTuple[snapperID]
        except:
            spaceTuple = ("N/A", "N/A")
        lineArr.append(" ")
        lineArr.extend(list(spaceTuple))
        table.append(lineArr)
    print tabulate(table, headers=headers, tablefmt="psql")


def main():
    """main function containing argument parsing code"""
    subcommandsHelp = {}
    subcommandsHelp['cat'] = "Read a specified file from a specified snapshot. "
    subcommandsHelp['backup'] = "Backup a specified snapshot to a file via btrfs send. "
    subcommandsHelp['restore'] = "Restore a snapshot from a file generated with snapperS backup. "
    subcommandsHelp['rm'] = ("Delete a specified file from either a range of snapshots " +
                                 "or from all snapshots. ")
    subcommandsHelp['list'] = ("A more comprehensive version of snapper list that includes "
                               "information on space usage. ")
    parser = argparse.ArgumentParser(
        description="snapperS: A variety of supplemental snapper subcommands",
        formatter_class=RawTextHelpFormatter)
    parser.add_argument('-d',
                        '--directory',
                        help='Directory containing the snapshots',
                        default='/.snapshots/')
    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        default=False,
        help=("Enable verbose logging. If you are experiencing difficulties " +
              "with this program, try with -v for debugging. "))

    subparsers = parser.add_subparsers(
        title='Subcommands',
        description='\n'.join([subcommandsHelp[key] for key in subcommandsHelp]))

    parser_cat = subparsers.add_parser('cat',
                                       description=subcommandsHelp['cat'])
    parser_cat.set_defaults(which='cat')
    parser_cat.add_argument('-f',
                            '--filename',
                            required=True,
                            metavar="~/file.txt",
                            help="The file to cat")
    parser_cat.add_argument('-s',
                            '--snapshot',
                            required=True,
                            metavar="42",
                            help="The snapshot to view")

    parser_backup = subparsers.add_parser('backup',
                                          description=(subcommandsHelp['backup'] +
                                                       "It is recommended to compress this file." +
                                                       "\n\t-In order to restore this file, run " +
                                                       "`cat backup | btrfs receive " +
                                                       "/mnt/subvol`"
                                                       "\n\t-If you want to sync your backups to "
                                                       "another BTRFS filesystem, ButterSink is "
                                                       "better suited for that purpose. "),
                                          formatter_class=RawTextHelpFormatter)
    parser_backup.set_defaults(which='backup')
    parser_backup.add_argument('-b',
                               '--backup',
                               required=True,
                               metavar="~/BTRFS_Backup.send",
                               help="The location to store the backup")
    parser_backup.add_argument('-s',
                               '--snapshot',
                               required=True,
                               metavar="42",
                               help="The number of the snapshot you want to backup")

    parser_restore = subparsers.add_parser('restore',
                                           description=subcommandsHelp['restore'])
    parser_restore.set_defaults(which='restore')
    parser_restore.add_argument('-b',
                                '--backup',
                                required=True,
                                metavar="~/BTRFS_Backup.send",
                                help="The location of the backup. ")
    parser_restore.add_argument('-r',
                                '--restoreLocation',
                                required=True,
                                metavar="~/newRestoredSubvolume/",
                                help="The path to where you want to restore the backup. ")

    parser_rm = subparsers.add_parser('rm',
                                      description=subcommandsHelp['rm'])
    parser_rm.set_defaults(which='rm')
    parser_rm.add_argument('-f',
                           '--filename',
                           required=True,
                           metavar="~/largeFile.img",
                           help="Delete a file from all past snapshots. ")
    parser_rm.add_argument('-r',
                           '--range',
                           metavar="1..42",
                           help=("The range of snapshots to delete the file from in the " +
                                 "form of startPoint..endPoint (e.g. 2..5)"))
    parser_rm.add_argument('--recursive',
                           action='store_true',
                           default=False,
                           help="Delete recursively (i.e. a folder)")

    parser_list = subparsers.add_parser('list',
                                        description=subcommandsHelp['list'])
    parser_list.set_defaults(which='list')

    args = vars(parser.parse_args())

    if not os.geteuid() == 0:  # must be root in order to delete files
        print "You must run this script as root"
        exit(1)

    if args['which'] == 'delete':
        delete(args)
    if args['which'] == 'cat':
        cat(args)
    if args['which'] == 'backup':
        backup(args)
    if args['which'] == 'restore':
        restore(args)
    if args['which'] == 'list':
        listSubvolumes()


if __name__ == '__main__':
    main()
